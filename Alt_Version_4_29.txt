# new app

import streamlit as st
import pandas as pd
import numpy as np
import xlsxwriter
import io
st.set_page_config(layout="wide")
from io import StringIO
from io import BytesIO
from snowflake.snowpark.context import get_active_session
session = get_active_session()
# Fetch User's EUA ID

###########################################################
# Functions 
###########################################################


def get_current_db(session):
    try:
        current_account = session.sql("SELECT CURRENT_ACCOUNT()").collect()[0][0]  # Fetch account name 
        return 'OPI_IMPL' if "ONEPINP" in current_account.upper() else 'OPI_PRD'
    except Exception as e:
        st.error(f"Error determining database: {e}")
        return None

current_db = get_current_db(session)  
run_by_user = session.sql("select current_user()").collect()[0][0]  
query_example = f"""SELECT * FROM {current_db}.CMS_BDM_VIEW_OPI_AAL.lov_clm_pos_cd"""



# Function to clear session state
def clear_session_state(prefix):
    keys_to_clear = [key for key in st.session_state.keys() if key.startswith(prefix)]
    for key in keys_to_clear:
        del st.session_state[key]
    st.write("Session state cleared")


#load CSV Files
@st.cache_data
def load_csv(file):
    return pd.read_csv(file)
        

# Function to run SQL queries and store results in session state
@st.cache_data
def run_sql_queries(query1, query2):
    if query1 and query2:
        st.session_state.df1 = session.sql(query1).to_pandas()
        st.session_state.df2 = session.sql(query2).to_pandas()
        st.write("First SQL DataFrame:")
        st.dataframe(st.session_state.df1.head(5))
        st.write("Second SQL DataFrame:")
        st.dataframe(st.session_state.df2.head(5))
    else:
        st.warning("Please enter both SQL queries to proceed.")

#Load Excel Files
@st.cache_data
def load_excel(file, sheet_name):
    return pd.read_excel(file, sheet_name=sheet_name)


# Save XLSX of comparison results 
def create_xlsx(df1, df2):
    # Check the size of df1
    if df1.shape[0] > 1048576:
        # Create the Excel file with only df2
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter', engine_kwargs={"options": {"use_zip64": False, "in_memory": True}}) as writer:
            df2.to_excel(writer, sheet_name="Macro Analysis")
        buffer.seek(0)
        return buffer
    else:
        # Create the Excel file with both df1 and df2
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter', engine_kwargs={"options": {"use_zip64": False, "in_memory": True}}) as writer:
            df1.to_excel(writer, sheet_name="Comparison Results")
            df2.to_excel(writer, sheet_name="Macro Analysis")
        buffer.seek(0)
    return buffer



# build comparison DataFrames
def identify_criteria(df1, df2):  
    criteria_met = True
    # Standardize column names to uppercase
    df1.columns = [col.upper() for col in df1.columns]
    df2.columns = [col.upper() for col in df2.columns]
    #Length
    if len(df1) != len(df2):
        st.warning(f"Row Error: False")
        st.write(f"Number of rows in df1: {len(df1):,}")
        st.write(f"Number of rows in df2: {len(df2):,}")
        criteria_met = False
    else:    
        st.success(f"Rows match: {len(df1) == len(df2)}")
        st.write(f"Number of rows in df1: {len(df1):,}")
        st.write(f"Number of rows in df2: {len(df2):,}")
        
    # Columns
    if list(df1.columns) != list(df2.columns):
        st.warning("Column (#) Error (case insensitive).")
        column_list = pd.DataFrame({'df1_columns': list(df1.columns), 'df2_columns': list(df2.columns)})
        st.write(column_list)
        criteria_met = False
    else: 
        st.success(f"Columns match: {list(df1.columns) == list(df2.columns)}")
        st.write(f"Number of columns in df1: {len(df1.columns):,}")
        st.write(f"Number of columns in df2: {len(df2.columns):,}")


    # Dtypes
    dtype_mismatch = {col: (df1[col].dtype, df2[col].dtype) for col in df1.columns if df1[col].dtype != df2[col].dtype}
    if dtype_mismatch:
        st.warning("Dtype match: False")
        st.write(pd.DataFrame(dtype_mismatch, index=["df1_dtype", "df2_dtype"]).T)
        criteria_met = False
        
    return criteria_met, dtype_mismatch


# Fix dfs before processing 


def convert_dtypes(df1, df2, dtype_mismatch, convert_to_float=False, specific_columns=None):
    if convert_to_float:
        if specific_columns:
            columns_to_convert = set(specific_columns)
        else:
            columns_to_convert = set(dtype_mismatch.keys())
        for col in columns_to_convert:
            if col in df1.columns:
                if df1[col].dtype == 'object' and pd.api.types.is_numeric_dtype(df2[col]):
                    df1[col] = pd.to_numeric(df1[col], errors='coerce').astype(float)
                elif pd.api.types.is_numeric_dtype(df1[col]):
                    df1[col] = df1[col].astype(float)
            if col in df2.columns:
                if df2[col].dtype == 'object' and pd.api.types.is_numeric_dtype(df1[col]):
                    df2[col] = pd.to_numeric(df2[col], errors='coerce').astype(float)
                elif pd.api.types.is_numeric_dtype(df2[col]):
                    df2[col] = df2[col].astype(float)
    return df1, df2


def round_and_sort(df1, df2, sort_columns, decimal_places=2):
    # Opted not to care to choose to round. its imperrative 
    # Round the numerical values
    df1 = df1.applymap(lambda x: round(x, decimal_places) if isinstance(x, (int, float)) else x)
    df2 = df2.applymap(lambda x: round(x, decimal_places) if isinstance(x, (int, float)) else x)

    # Sort DataFrames based on the specified columns
    df1 = df1.sort_values(by=sort_columns, ignore_index=True)
    df2 = df2.sort_values(by=sort_columns, ignore_index=True)
    
    return df1, df2



# Compare DataFrames
def test_compare_dataframes(df1, df2, drop_na=False, result_names=("df1", "df2"), **compare_kwargs):
    """
    Compares two dataframes and returns the differences, keeping the index for reference.
    Also prints the percentage of rows that are different.
    Will allow further analysis on the 2 dfs to be viewed and diagnosed. 

    Parameters:
    df1 (pd.DataFrame): First dataframe.
    df2 (pd.DataFrame): Second dataframe.
    drop_na (bool): Whether to drop rows with NaN values.
    result_names (tuple): Names to use for the comparison columns.
    compare_kwargs (dict): Additional keyword arguments for the compare method.

    Returns:
    pd.DataFrame: Dataframe showing the differences, keeping the index for reference.
    """
    try:
        if not df1.equals(df2):
            st.warning("Dataframe values are not equal:")
            comparison = df1.compare(df2, keep_shape=True, keep_equal=True, result_names=result_names, **compare_kwargs)
            
            # Calculate the difference for numerical columns only
            numerical_cols = df1.select_dtypes(include='number').columns
            for col in numerical_cols:
                comparison[(col, 'delta')] = comparison[(col, result_names[0])] - comparison[(col, result_names[1])]
                # Make delta that is 0 null
                comparison.loc[comparison[(col, 'delta')] == 0, (col, 'delta')] = None
            
            # Add boolean column for non-numeric columns
            non_numerical_cols = df1.select_dtypes(exclude='number').columns
            for col in non_numerical_cols:
                # Replace NaN with a placeholder value
                comparison[(col, result_names[0])] = comparison[(col, result_names[0])].fillna('placeholder')
                comparison[(col, result_names[1])] = comparison[(col, result_names[1])].fillna('placeholder')
                
                # Perform the comparison and set 1 for differences
                comparison[(col, 'delta')] = np.where(comparison[(col, result_names[0])] != comparison[(col, result_names[1])], 1, np.nan)
    
            # Reorder the MultiIndex to place 'delta' after the result_names columns
            new_columns = []
            for col in comparison.columns.levels[0]:
                new_columns.append((col, result_names[0]))
                new_columns.append((col, result_names[1]))
                if (col, 'delta') in comparison.columns:
                    new_columns.append((col, 'delta'))
            
            comparison = comparison.reindex(columns=pd.MultiIndex.from_tuples(new_columns))
            
            if drop_na:
                # Drop rows where all columns are NaN (i.e., no deltas)
                comparison = comparison.dropna(how='all')
            
            # Print the number of rows that have at least one non-null 'delta' value 
            rows_to_attend = comparison.loc[:, (slice(None), 'delta')].notnull().any(axis=1).sum()
            st.warning(f"Number of rows that have at least one non-null **delta** value and need to be addressed: {rows_to_attend:,}")
            
            # Calculate the percentage of cells out of total that have a non-null 'delta' value
            total_cells = comparison.loc[:, (slice(None), 'delta')].size
            non_null_cells = comparison.loc[:, (slice(None), 'delta')].notnull().sum().sum()
            percentage_non_null_cells = (non_null_cells / total_cells) * 100
            st.write(f"Percentage of cells out of total that have a non-null 'delta' value: {percentage_non_null_cells:.2f}%")
    
        else:
            st.success(f"Dataframe values are equal")
            comparison = pd.DataFrame()  # Return an empty dataframe if they are equal
        
        return comparison
    
    except ValueError as e:
        st.error("DataFrames are not similar still and cannot be compared.")
        
        # labels_df = pd.DataFrame({
        #             "DataFrame 1 Labels": df1.columns.tolist(),
        #             "DataFrame 2 Labels": df2.columns.tolist()})
        # st.write(labels_df)
        return None



###############################################################################
# Streamlit app
###############################################################################
def main():
    
    # Check if DataFrames are in session state
    if 'df1' not in st.session_state:
        st.session_state.df1 = pd.DataFrame()
    if 'df2' not in st.session_state:
        st.session_state.df2 = pd.DataFrame()
        
    st.markdown("<h1 style='color: red; text-align: center;'>Upload and Compare Data Sources Part Deux</h1>", unsafe_allow_html=True)
    
    # Layout for side-by-side display
    col1, col2 = st.columns(2)
    

    ###########################################################################################################  
    # DF1 Choices
    ###########################################################################################################    
    with col1:
        st.subheader("DF1 File Type:")
        data_source_df1 = st.selectbox("", ["CSV", "XLSX", "SQL"], key="data_source_df1")
        
        # Force a rerun when the data source for df1 is changed
        if 'last_data_source_df1' not in st.session_state:
            st.session_state.last_data_source_df1 = data_source_df1
        
        if st.session_state.last_data_source_df1 != data_source_df1:
            clear_session_state('df1')
            st.session_state.last_data_source_df1 = data_source_df1
            st.rerun()

        header_placeholder_df1 = st.empty()
        uploader_placeholder_df1 = st.empty()

        ###########################################################################################################  
        # CSV input for df1
        ###########################################################################################################
        if data_source_df1 == "CSV":
            header_placeholder_df1.header("Upload .CSV File for df1")
            uploaded_file1 = uploader_placeholder_df1.file_uploader("Choose the CSV file for df1", type=["csv"],key="csv_file1")
            if uploaded_file1 is not None:
                st.session_state.df1 = load_csv(uploaded_file1)
                st.write("df1 DataFrame:")
                st.dataframe(st.session_state.df1.head(5))
    
        ###########################################################################################################  
        # EXCEL input for df1
        ###########################################################################################################    
        elif data_source_df1 == "XLSX":
            header_placeholder_df1.header("Upload .XLSX File for df1")
            uploaded_file_1 = uploader_placeholder_df1.file_uploader("Upload Excel File (.xlsx) for df1", type="xlsx", key="xlsx_file1")
            if uploaded_file_1:
                try:
                    xls1 = pd.ExcelFile(uploaded_file_1)
                    sheet_names_1 = xls1.sheet_names
                    sheet_name_1 = st.selectbox(f"'{uploaded_file_1.name}'", sheet_names_1, key="sheet1")
                    if sheet_name_1:
                        st.session_state.df1 = load_excel(uploaded_file_1, sheet_name=sheet_name_1)
                        st.dataframe(st.session_state.df1.head(5))
                except Exception as e:
                    st.error(f"Error reading Excel file structure: {e}")
                    st.stop()
    
        ###########################################################################################################  
        # SQL input for df1
        ###########################################################################################################
        elif data_source_df1 == "SQL":
            header_placeholder_df1.header("Enter SQL query for df1")
            sql_query_1 = uploader_placeholder_df1.text_area("Enter the SQL query for df1", placeholder="SELECT * FROM table_name",key="sql_file1")
            if st.button("Run SQL Query for df1"):
                st.session_state.df1 = run_sql_query(sql_query_1)
                st.dataframe(st.session_state.df1.head(5))
    
    ###########################################################################################################  
    # DF2 Choices
    ###########################################################################################################    
    with col2:
        st.subheader("DF2 File Type:")
        data_source_df2 = st.selectbox("", ["CSV", "XLSX", "SQL"], key="data_source_df2")
        if 'last_data_source_df2' not in st.session_state:
            st.session_state.last_data_source_df2 = data_source_df2
        
        if st.session_state.last_data_source_df2 != data_source_df2:
            clear_session_state('df2')
            st.session_state.last_data_source_df2 = data_source_df2
            st.rerun()

        header_placeholder_df2 = st.empty()
        uploader_placeholder_df2 = st.empty()

        ###########################################################################################################  
        # CSV input for df2
        ###########################################################################################################
        if data_source_df2 == "CSV":
            header_placeholder_df2.header("Upload .CSV File for df2")
            uploaded_file2 = uploader_placeholder_df2.file_uploader("Choose the CSV file for df2", type=["csv"], key="csv_file2")
            if uploaded_file2 is not None:
                st.session_state.df2 = load_csv(uploaded_file2)
                st.write("df2 DataFrame:")
                st.dataframe(st.session_state.df2.head(5))
    
        ###########################################################################################################  
        # EXCEL input for df2
        ###########################################################################################################    
        elif data_source_df2 == "XLSX":
            header_placeholder_df2.header("Upload .XLSX File for df2")
            uploaded_file_2 = uploader_placeholder_df2.file_uploader("Upload Excel File (.xlsx) for df2", type="xlsx", key="xlsx_file2")
            if uploaded_file_2:
                try:
                    xls2 = pd.ExcelFile(uploaded_file_2)
                    sheet_names_2 = xls2.sheet_names
                    sheet_name_2 = st.selectbox(f"'{uploaded_file_2.name}'", sheet_names_2, key="sheet2")
                    if sheet_name_2:
                        st.session_state.df2 = load_excel(uploaded_file_2, sheet_name=sheet_name_2)
                        st.dataframe(st.session_state.df2.head(5))
                except Exception as e:
                    st.error(f"Error reading Excel file structure: {e}")
                    st.stop()
    
        ###########################################################################################################  
        # SQL input for df2
        ###########################################################################################################
        elif data_source_df2 == "SQL":
            header_placeholder_df2.header("Enter SQL query for df2")
            sql_query_2 = uploader_placeholder_df2.text_area("Enter the SQL query for df2", placeholder="SELECT * FROM table_name",key="sql_file2")
            if st.button("Run SQL Query for df2"):
                st.session_state.df2 = run_sql_query(sql_query_2)
                st.dataframe(st.session_state.df2.head(5))

###########################################################################################################  
                        # Full Processing
###########################################################################################################    
    ###########################################################################################################  
    # Sort option for both DataFrames
    ###########################################################################################################
    if not st.session_state.df1.empty and not st.session_state.df2.empty:
        st.header("Analyzing Datasets")
        criteria_met, dtype_mismatch = identify_criteria(st.session_state.df1, st.session_state.df2)
        
        # Length, Columns and Datatype Check
        if not criteria_met:
            st.warning(f"Criteria Met: {criteria_met}. Please fix the float criteria before processing the data.")
            
            # Dynamically generate list of columns with differing data types for user to select
            specific_columns = st.multiselect("Select specific columns to convert to float", list(dtype_mismatch.keys()))
            st.write("Convert non-float columns to float?")
            convert_to_float = st.checkbox("")
            
            if st.button("Fix and Process Data"):
                st.session_state.df1_processed, st.session_state.df2_processed = convert_dtypes(
                    st.session_state.df1, st.session_state.df2, dtype_mismatch
                        ,convert_to_float=convert_to_float,specific_columns=specific_columns)
                dtype_fix = {col: (st.session_state.df1[col].dtype, st.session_state.df2[col].dtype) for col in st.session_state.df1.columns}
                st.write(pd.DataFrame(dtype_fix, index=["df1_dtype", "df2_dtype"]).T)
                st.success("Data types converted successfully! Now proceed to sorting and rounding.")
        else:
            st.success("Criteria met! Proceeding to sorting and rounding.")
            st.session_state.df1_processed = st.session_state.df1.copy()
            st.session_state.df2_processed = st.session_state.df2.copy()
        
        if 'df1_processed' in st.session_state and 'df2_processed' in st.session_state:
            # Proceed to sorting and rounding
            sort_columns = st.multiselect("Select columns to sort both DataFrames by", st.session_state.df1.columns.intersection(st.session_state.df2.columns))
            decimal_places = st.number_input("Choose number of decimal places", min_value=0, max_value=10, value=2)
            
            if st.button("Sort and Round Data"):
                st.session_state.df1_processed, st.session_state.df2_processed = round_and_sort(
                    st.session_state.df1_processed, st.session_state.df2_processed, sort_columns=sort_columns, decimal_places=decimal_places)
                st.session_state.sort_and_round_done = True
                st.success("Data sorted and rounded successfully! You can now compare the DataFrames.")
        
            # Compare DataFrames
            if st.session_state and 'sort_and_round_done' in st.session_state and st.session_state.sort_and_round_done:
                st.header("Compare Data")
                if st.button("Compare DataFrames"):
                    comparison = test_compare_dataframes(st.session_state.df1_processed, st.session_state.df2_processed)
                    if comparison is not None:
                        try:
                            if not comparison.empty:
                                comparison_deltas = comparison[comparison.loc[:, (slice(None), 'delta')].notnull().any(axis=1)]
                                result_analysis = comparison.loc[:, (slice(None), 'delta')].describe().T
                                st.write("Result Analysis:")
                                st.dataframe(result_analysis, width=1200, height=400)
                                
                                if len(comparison_deltas) > 100000:
                                    st.write("Comparison Results:")
                                    st.dataframe(comparison_deltas.head(10))
                                else:
                                    st.write("Comparison Results:")
                                    st.dataframe(comparison_deltas)
                                st.success("Comparison complete!")
                                    
                                st.header("Save Files in Excel:")
                                buffer = create_xlsx(comparison_deltas, result_analysis)
                                excel_file_path = st.text_input("Enter the filename (xlsx):")
                    
                        except AttributeError as e:
                            st.error("Comparison result is None and has no attribute 'empty'.")

if __name__ == "__main__":
    main()
